from tabulate import tabulate
import json
import yaml
import csv
class Converter():

    def __init__(self, args):
        self.dict = dict()
        self.column_names = list()
        self.list = list()
        self.col_list = list()
        self.sqldatatypes = dict()
        self.rowdepth = 0
        self.file = args['f'].read()
        self.ln_file = self.file.splitlines()

        #Converting the file from IOWrapper to a String.
        def convert():

            for line in self.ln_file:
                line = line.split(",")
                line = [i.strip(' ') for i in line]
                line = [i.strip('.') for i in line]
                if self.rowdepth < len(line):
                    self.rowdepth = len(line)

                self.list.append(line)

            return

        def sql_wizard():
            for x in (range(self.rowdepth)):
                try:
                    i = str(input(f"Input Column Datatype (COL: {self.column_names[x]})(Data : {self.list[0][x]}) ({len(self.list[0][x])}): "))
                    self.sqldatatypes[self.column_names[x]] = i
                except ValueError:
                    print("Value is not a string!")

        def column_create():
            if args['p'] is True:

                self.column_names = self.ln_file[0].split(",")
                self.column_names = [i.strip(" ") for i in self.column_names]
                self.column_names = [i.strip(".") for i in self.column_names]
                self.list.remove(self.column_names)

                for line in self.list:
                    self.col_list.append(dict(zip(self.column_names, line)))

                return
            for x in (range(self.rowdepth)):
                try:
                    i = str(input(f"Input Column Name (Data : {self.list[0][x]}): "))
                    self.column_names.append(i)
                except ValueError:
                    print("Value is not a string!")

        if args['json'] is True:
            convert()
            column_create()
            print("Converting this table to JSON.")
            print(tabulate(self.list, headers=self.column_names, tablefmt="fancy_grid"))
            output_filename = str(input("Input a filename for the converted file : "))
            if output_filename is "": output_filename = "default"
            with open(f'{output_filename}.json', 'w') as f:
                f.write(json.dumps(self.col_list))

        if args['yml'] is True:
            convert()
            column_create()
            print("Converting this table to YAML.")
            #print(tabulate(self.list, headers=self.column_names, tablefmt="fancy_grid"))
            output_filename = str(input("Input a filename for the converted file : "))
            if output_filename is "": output_filename = "default"
            with open(f'{output_filename}.yml', 'w') as f:
                for x in self.col_list:
                    f.write(yaml.dump(self.col_list))

        if args['sql'] is True:
            convert()
            column_create()
            print("Converting this table to SQL Schema.")
            print(tabulate(self.list, headers=self.column_names, tablefmt="fancy_grid"))
            table_name = str(input("Input Table Name : "))
            if table_name is "": table_name = "default"
            output_filename = str(input("Input a filename for the converted file : "))
            if output_filename is "": output_filename = "default"

            sql_wizard()

            with open(f'{output_filename}.sql', 'w') as f:
                f.write("/* CREATE TABLE Statement generated by JoelUrwin's Delimiter Converter.*/\n")
                f.write(f"CREATE TABLE {table_name} (\n")
                for x in self.column_names:
                    if x == self.column_names[-1]:
                        f.write(f"    {x.lower()} {self.sqldatatypes[x]}\n")
                    else:
                        f.write(f"    {x.lower()} {self.sqldatatypes[x]},\n")
                f.write(");\n")
                f.write("/* INSERT INTO Statement generated by JoelUrwin's Delimiter Converter.*/\n")
                for x in self.list:
                    f.write(f"INSERT INTO {table_name}\nVALUES ({str(x).strip('[]')});\n")

        if args['csv'] is True:
            convert()
            column_create()
            print("Converting this table to CSV.")
            print(tabulate(self.list, headers=self.column_names, tablefmt="fancy_grid"))

        if args['enum'] is True:
            convert()
            column_create()
            print("Converting this table to a Java ENUM.")
            print(tabulate(self.list, headers=self.column_names))

